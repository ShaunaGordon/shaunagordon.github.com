{"remainingRequest":"/home/dragonwolf/Projects/shaunagordon.github.com/content/resume/node_modules/babel-loader/lib/index.js!/home/dragonwolf/Projects/shaunagordon.github.com/content/resume/node_modules/vue-loader/lib/selector.js?type=script&index=0!/home/dragonwolf/Projects/shaunagordon.github.com/content/resume/src/components/graphics/Donut.vue","dependencies":[{"path":"/home/dragonwolf/Projects/shaunagordon.github.com/content/resume/src/components/graphics/Donut.vue","mtime":1519090813507},{"path":"/home/dragonwolf/Projects/shaunagordon.github.com/content/resume/package.json","mtime":1518994732302},{"path":"/home/dragonwolf/Projects/shaunagordon.github.com/content/resume/node_modules/cache-loader/dist/cjs.js","mtime":1518992915114},{"path":"/home/dragonwolf/Projects/shaunagordon.github.com/content/resume/node_modules/babel-loader/lib/index.js","mtime":1518992915114},{"path":"/home/dragonwolf/Projects/shaunagordon.github.com/content/resume/node_modules/vue-loader/lib/selector.js","mtime":1518992915518}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\nimport * as d3 from 'd3';\nexport default {\n  props: ['name', 'items'],\n  computed: {\n    id: function id() {\n      return \"skill-\".concat(this.name);\n    }\n  },\n  methods: {\n    createD3DataSet: function createD3DataSet() {\n      var _this = this;\n\n      var names = Object.keys(this.items);\n      return names.map(function (name, index) {\n        return {\n          index: index,\n          name: name,\n          years: _this.items[name]\n        };\n      });\n    },\n    createChart: function createChart() {\n      var dataset = this.createD3DataSet();\n      var format = d3.format('%');\n      var pie = d3.pie().value(function (d) {\n        return d.years;\n      }).sort(null).padAngle(.01);\n      var w = 400,\n          h = 400;\n      var canvasWidth = w * 1.1,\n          canvasHeight = h * 1.1;\n      var donutWidth = 50;\n      var radius = Math.min(w / 1.5, h) / 2;\n      var color = d3.scaleSequential(d3.interpolateViridis);\n      var arc = d3.arc().innerRadius(radius - donutWidth).outerRadius(radius);\n      var outerArc = d3.arc().innerRadius(radius * 1.23).outerRadius(radius * 1.23);\n      var zoomArc = d3.arc().innerRadius((radius - donutWidth) * 1.1).outerRadius(radius * 1.2);\n      var svg = d3.select(\"#\".concat(this.id)).append(\"svg\").attr('width', canvasWidth).attr('height', canvasHeight);\n      svg.append('g').attr('class', 'slices').attr('transform', 'translate(' + canvasWidth / 2 + ',' + canvasHeight / 2 + ')');\n      svg.append('g').attr('class', 'labels').attr('transform', 'translate(' + canvasWidth / 2 + ',' + canvasHeight / 2 + ')');\n      svg.append('g').attr('class', 'lines').attr('transform', 'translate(' + canvasWidth / 2 + ',' + canvasHeight / 2 + ')');\n      svg.append('g').attr('class', 'name').attr('transform', 'translate(' + canvasWidth / 2 + ',' + canvasHeight / 2 + ')');\n      var path = svg.select('.slices').selectAll('.slice').data(pie(dataset)).enter().append('path').attr('id', function (d, i) {\n        return \"slice-\".concat(d.data.name, \"-\").concat(i);\n      }).attr('class', 'slice').attr('d', arc).attr('fill', function (d, i) {\n        return color(d.data.name.length * (d.data.index + 1) * d.data.years * 0.005);\n      }).on('mouseenter', function (d) {\n        d3.select(this).transition().duration(1000).attr('d', zoomArc);\n      }).on('mouseleave', function (d) {\n        d3.select(this).transition().duration(1000).attr('d', arc);\n      });\n      var outerPath = svg.select('.labels').selectAll('.path').data(pie(dataset)).enter().append('path').attr('id', function (d, i) {\n        return \"label-\".concat(d.data.name, \"-\").concat(i);\n      }).attr('d', outerArc).attr('class', 'path');\n      var labels = svg.select('.slices').selectAll('.label').data(pie(dataset)).enter().append('text').attr('class', 'label').attr('transform', function (d) {\n        return \"translate(\" + outerArc.centroid(d) + \")\";\n      }).attr('text-anchor', 'middle').text(function (d) {\n        return d.data.name;\n      });\n      var skillLabel = svg.select('.name').append('text').attr('class', 'name').attr('text-anchor', 'middle').text(this.name);\n    }\n  },\n  mounted: function mounted() {\n    this.createChart();\n  }\n};",{"version":3,"sources":["Donut.vue"],"names":[],"mappings":";;;;;;;;AAOA;AAEA;SAEA,CACA,QACA,AACA;;sBAEA;kCACA;AACA,AACA;AAJA;;;AAMA;;mCACA;8CACA;;iBAEA;gBACA;6BACA,AACA;AAJA;AAKA;AACA;wCACA;yBACA;6BAEA;mBACA;iBACA;cACA,eAEA;;cACA;;6BACA;uBACA;0CAEA;wCAEA;mBACA,2BACA,wBAEA;wBACA,2BACA,2BAEA;uBACA,0CACA,0BAEA;0CACA,YACA,qBACA,4BAEA;0HACA;0HACA;yHACA;wHAEA;iDACA,mBACA,UACA,eACA;wDACA;uBACA,mBACA;8EACA;uCACA;kBACA,MACA,sBACA,gBACA;AACA,uCACA;kBACA,MACA,sBACA,gBACA;AAEA;sDACA,kBACA,UACA,eACA;wDACA;mBACA,wBAEA;mDACA,mBACA,UACA,eACA,sBACA;qDACA;6BACA;sBAEA;;kCACA,gBACA,sBACA,4BACA,oBACA;AACA,AACA;AA7FA;8BA8FA;SACA;AACA;AA1GA","sourceRoot":"src/components/graphics","sourcesContent":["<template>\n  <div :id=\"id\">\n\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3';\n\nexport default {\n    props: [\n        'name',\n        'items'\n    ],\n    computed: {\n        id() {\n            return `skill-${this.name}`\n        }\n    },\n    methods: {\n        createD3DataSet() {\n            let names = Object.keys(this.items);\n            return names.map((name, index) => {\n                return {\n                    index: index,\n                    name: name,\n                    years: this.items[name]\n                }\n            });\n        },\n        createChart() {\n            let dataset = this.createD3DataSet();\n            let format = d3.format('%');\n\n            let pie = d3.pie()\n                .value(d => d.years)\n                .sort(null)\n                .padAngle(.01);\n\n            let w = 400, h = 400;\n            let canvasWidth = w * 1.1, canvasHeight = h * 1.1;\n            let donutWidth = 50;\n            let radius = Math.min(w/1.5, h) / 2;\n\n            let color = d3.scaleSequential(d3.interpolateViridis);\n\n            let arc = d3.arc()\n                    .innerRadius(radius - donutWidth)\n                    .outerRadius(radius);\n\n            let outerArc = d3.arc()\n                    .innerRadius(radius * 1.23)\n                    .outerRadius(radius * 1.23);\n\n            let zoomArc = d3.arc()\n                    .innerRadius((radius - donutWidth) * 1.1)\n                    .outerRadius(radius * 1.2);\n\n            let svg = d3.select(`#${this.id}`)\n                        .append(\"svg\")\n                        .attr('width', canvasWidth)\n                        .attr('height', canvasHeight);\n\n            svg.append('g').attr('class', 'slices').attr('transform', 'translate('+canvasWidth/2+','+canvasHeight/2+')');\n            svg.append('g').attr('class', 'labels').attr('transform', 'translate('+canvasWidth/2+','+canvasHeight/2+')');\n            svg.append('g').attr('class', 'lines').attr('transform', 'translate('+canvasWidth/2+','+canvasHeight/2+')');\n            svg.append('g').attr('class', 'name').attr('transform', 'translate('+canvasWidth/2+','+canvasHeight/2+')');\n\n            let path = svg.select('.slices').selectAll('.slice')\n                    .data(pie(dataset))\n                    .enter()\n                    .append('path')\n                        .attr('id', (d,i) => `slice-${d.data.name}-${i}`)\n                        .attr('class', 'slice')\n                        .attr('d', arc)\n                        .attr('fill', (d,i) => color(d.data.name.length * (d.data.index + 1) * d.data.years * 0.005))\n                        .on('mouseenter', function(d) {\n                            d3.select(this)\n                                .transition()\n                                .duration(1000)\n                                .attr('d', zoomArc);\n                        })\n                        .on('mouseleave', function(d) {\n                            d3.select(this)\n                                .transition()\n                                .duration(1000)\n                                .attr('d', arc);\n                        });\n\n            let outerPath = svg.select('.labels').selectAll('.path')\n                        .data(pie(dataset))\n                        .enter()\n                        .append('path')\n                        .attr('id', (d,i) => `label-${d.data.name}-${i}`)\n                        .attr('d', outerArc)\n                        .attr('class', 'path');\n\n            let labels = svg.select('.slices').selectAll('.label')\n                    .data(pie(dataset))\n                    .enter()\n                        .append('text')\n                            .attr('class', 'label')\n                            .attr('transform', (d) => \"translate(\" + outerArc.centroid(d) + \")\")\n                            .attr('text-anchor', 'middle')\n                            .text((d) => d.data.name);\n\n            let skillLabel = svg.select('.name')\n                        .append('text')\n                            .attr('class', 'name')\n                            .attr('text-anchor', 'middle')\n                            .text(this.name);\n        }\n    },\n    mounted() {\n        this.createChart();\n    }\n}\n</script>\n\n<style>\n    svg {\n        font-size: 1.1rem;\n    }\n\n    .slice {\n        transition: all 1s;\n    }\n</style>\n"]}]}